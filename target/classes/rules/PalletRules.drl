package rules
 
import cost.OrderLine;
import cost.LeftToDistribute;
import cost.Product;
import cost.Pallet;
import cost.CostCalculationRequest;
import cost.CalculatedElement;
import java.lang.Math;


rule "Create Counter leftToDistribute quantity"
	ruleflow-group "distribution"
    when
  		$elt : OrderLine( numberItems >0 )
  		not (LeftToDistribute(orderLine==$elt))
    then
  	LeftToDistribute e= new LeftToDistribute($elt,$elt.getNumberItems());
  	insert(e);
end
rule "Create Counter leftToDistribute weight"
	ruleflow-group "distribution"
    when
  		$elt : OrderLine( weight  >0 )
  		not (LeftToDistribute(orderLine==$elt))
    then
  	LeftToDistribute e= new LeftToDistribute($elt,$elt.getWeight());
  	insert(e);
end
rule "Create PalletForIndividual"
	ruleflow-group "distribution"
    when
    	$c : CostCalculationRequest()
    	$p : Product(transportType==Product.transportType_individual)
  		$elt : OrderLine(product==$p  )		
  		$l : LeftToDistribute(quantityLeft> 0,orderLine==$elt)
    then
  		Pallet pp = new Pallet();
  		pp.setPalletType($p.getTransportType());
  		pp.addContent($p,new Long(1));
  		insert(pp);
  		$c.getPallets().add(pp);
  		$l.setQuantityLeft($l.getQuantityLeft()-1);
  		update($l);
end

rule "Create PalletForBulkMore1400Kg"
	ruleflow-group "distribution"
    when
    	$c : CostCalculationRequest()
    	$p : Product(transportType==Product.transportType_bulkt)
  		$elt : OrderLine(product==$p  )		
  		$l : LeftToDistribute(weightLeft > 1400,orderLine==$elt)
    then
  		Pallet pp = new Pallet();
  		pp.setPalletType($p.getTransportType());
  		pp.addContent($p,new Long(1400));
  		insert(pp);
  		$c.getPallets().add(pp);
  		$l.setWeightLeft($l.getWeightLeft()-1400);
  		update($l);
end
rule "Create PalletForBulkless1400Kg"
	ruleflow-group "distribution"
    when
    	$c : CostCalculationRequest()
    	$p : Product(transportType==Product.transportType_bulkt)
  		$elt : OrderLine(product==$p  )		
  		$l : LeftToDistribute(weightLeft <= 1400,weightLeft > 0,orderLine==$elt)
    then
  		Pallet pp = new Pallet();
  		pp.setPalletType($p.getTransportType());
  		pp.addContent($p,$l.getWeightLeft());
  		insert(pp);
  		$c.getPallets().add(pp);
  		$l.setWeightLeft(0);
  		update($l);
end

rule  "Create Empty Pallet"
	ruleflow-group "distribution"
when
	not (Pallet (palletType == Product.transportType_pallet,full ==false))
then
	Pallet p = new Pallet();
	p.setPalletType(Product.transportType_pallet);
	insert (p);
end



rule "Create PalletFortransportType_pallet"
	ruleflow-group "distribution"
    when
    	$c : CostCalculationRequest()
    	$pp : Pallet($hl : heightLeft ,full ==false,palletType == Product.transportType_pallet)
    	$p : Product(height <= $hl,transportType==Product.transportType_pallet)
  		$elt : OrderLine(product==$p  )		
  		$l : LeftToDistribute(quantityLeft > 0,orderLine==$elt)
    then
  		long a = (long) Math.round($pp.getWidth()/$p.getWidth());
  		long b = (long) Math.round($pp.getDepth()/$p.getDepth());
  		long n = Math.min(a*b,$l.getQuantityLeft());
  		$pp.addContent($p,n);
  		$pp.setHeightLeft($pp.getHeightLeft()-$p.getHeight());
  		update($pp);
  		$l.setQuantityLeft($l.getQuantityLeft()-n);
  		update($l);
end

rule "FillPalletIfNoProductGoesIn"
	ruleflow-group "distribution"
    when   
    	CalculatedElement($min : doubleValue ,key=="minValue.product")
        $p : Pallet(heightLeft!= 2.0,$hl : heightLeft < $min ,full ==false,palletType == Product.transportType_pallet) 
    then
    	$p.setFull(true);
    	//System.out.println("MinValue="+$min);
    	update($p);
end

rule "GetSmallestHeight"
	ruleflow-group "distribution"
    when   
    	accumulate( Product( $h : height ,transportType==Product.transportType_pallet );
                $min : min( $h );
                true )
               
    then
    	CalculatedElement elt = new CalculatedElement();
    	elt.setKey("minValue.product");   	
    	elt.setDoubleValue((Double)$min);
    	insert(elt);
end
